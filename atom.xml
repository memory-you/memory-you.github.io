<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zeroXP</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://memory-you.github.io/"/>
  <updated>2019-09-28T12:30:00.135Z</updated>
  <id>https://memory-you.github.io/</id>
  
  <author>
    <name>zero XP</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript专题之jQuery通用遍历方式each的实现</title>
    <link href="https://memory-you.github.io/2019/09/28/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8BjQuery%E9%80%9A%E7%94%A8%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8Feach%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://memory-you.github.io/2019/09/28/JavaScript专题之jQuery通用遍历方式each的实现/</id>
    <published>2019-09-28T12:02:37.000Z</published>
    <updated>2019-09-28T12:30:00.135Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;jQuery的each方法，作为一个通用遍历方法，可用于遍历对象和数组&lt;/p&gt;
&lt;p&gt;语法是：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;t
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript专题之在数组中查找指定元素</title>
    <link href="https://memory-you.github.io/2019/09/28/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E5%9C%A8%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E6%8C%87%E5%AE%9A%E5%85%83%E7%B4%A0/"/>
    <id>https://memory-you.github.io/2019/09/28/JavaScript专题之在数组中查找指定元素/</id>
    <published>2019-09-28T07:18:45.000Z</published>
    <updated>2019-09-28T12:00:16.336Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;在开发中，我们经常会遇到在数组中查找指定元素的需求，可能大家觉得这个需求过于简单，然而如何优雅的去实现一个findIndex和findLastIndex、indexOf和lastIndexOf方法确实很少人思考的。&lt;/p&gt;
&lt;p&gt;在实现前，先看看ES6的findIndex方法，让大家了解findIndex的使用方法。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript专题之如何求数组的最大值和最小值</title>
    <link href="https://memory-you.github.io/2019/09/28/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E5%A6%82%E4%BD%95%E6%B1%82%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC%E5%92%8C%E6%9C%80%E5%B0%8F%E5%80%BC/"/>
    <id>https://memory-you.github.io/2019/09/28/JavaScript专题之如何求数组的最大值和最小值/</id>
    <published>2019-09-28T07:18:15.000Z</published>
    <updated>2019-09-28T07:38:48.675Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;取出数组中的最大值或者最小值是开发中常见的需求，但你能想出几种方法来实现这个需求呢？&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript专题之类型判断</title>
    <link href="https://memory-you.github.io/2019/09/27/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/"/>
    <id>https://memory-you.github.io/2019/09/27/JavaScript专题之类型判断/</id>
    <published>2019-09-27T04:42:45.000Z</published>
    <updated>2019-09-27T16:27:36.242Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;类型判断在web开发中有非常广泛的应用，简单的有判断数字还是字符串，进阶一点的有判断数组还是对象，再进阶一点的有判断日期、正则、错误类型，再再进阶一点还有比如判断plainObject、空对象、Window对象等等。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript专题之从零实现jQuery的extend</title>
    <link href="https://memory-you.github.io/2019/09/27/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0jQuery%E7%9A%84extend/"/>
    <id>https://memory-you.github.io/2019/09/27/JavaScript专题之从零实现jQuery的extend/</id>
    <published>2019-09-27T04:42:14.000Z</published>
    <updated>2019-09-27T13:15:30.734Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
jQuery的extend是jQuery中应用非常多的一个函数，今天我们一起看jQuery的extend特性，一边实现一个extend。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript专题之乱序</title>
    <link href="https://memory-you.github.io/2019/09/26/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E4%B9%B1%E5%BA%8F/"/>
    <id>https://memory-you.github.io/2019/09/26/JavaScript专题之乱序/</id>
    <published>2019-09-26T05:48:06.000Z</published>
    <updated>2019-09-26T05:48:06.727Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;


        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript专题之递归</title>
    <link href="https://memory-you.github.io/2019/09/26/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E9%80%92%E5%BD%92/"/>
    <id>https://memory-you.github.io/2019/09/26/JavaScript专题之递归/</id>
    <published>2019-09-26T05:47:56.000Z</published>
    <updated>2019-09-26T05:47:56.914Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;


        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript专题之函数记忆</title>
    <link href="https://memory-you.github.io/2019/09/26/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E5%87%BD%E6%95%B0%E8%AE%B0%E5%BF%86/"/>
    <id>https://memory-you.github.io/2019/09/26/JavaScript专题之函数记忆/</id>
    <published>2019-09-26T05:47:49.000Z</published>
    <updated>2019-09-26T05:47:49.889Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;


        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript专题之惰性函数</title>
    <link href="https://memory-you.github.io/2019/09/26/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E6%83%B0%E6%80%A7%E5%87%BD%E6%95%B0/"/>
    <id>https://memory-you.github.io/2019/09/26/JavaScript专题之惰性函数/</id>
    <published>2019-09-26T05:47:41.000Z</published>
    <updated>2019-09-26T11:10:07.119Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;我们现在需要写一个foo函数，这个函数返回首次调用时的Data对象，注意是首次。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript专题之偏函数</title>
    <link href="https://memory-you.github.io/2019/09/26/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E5%81%8F%E5%87%BD%E6%95%B0/"/>
    <id>https://memory-you.github.io/2019/09/26/JavaScript专题之偏函数/</id>
    <published>2019-09-26T05:47:28.000Z</published>
    <updated>2019-09-26T11:12:46.944Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;维基百科中对偏函数 (Partial application) 的定义为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In computer science, partial application (or partial function application) refers to the process of fixing a number of arguments to a function, producing another function of smaller arity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;翻译成中文：&lt;/p&gt;
&lt;p&gt;在计算机科学中，局部应用是指固定一个函数的一些参数，然后产生另一个更小元的函数。&lt;/p&gt;
&lt;p&gt;什么是元？元是指函数参数的个数，比如一个带有两个参数的函数被称为二元函数。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript专题之函数柯里化</title>
    <link href="https://memory-you.github.io/2019/09/26/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
    <id>https://memory-you.github.io/2019/09/26/JavaScript专题之函数柯里化/</id>
    <published>2019-09-26T05:47:20.000Z</published>
    <updated>2019-09-26T05:47:20.254Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;


        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript专题之数组扁平化</title>
    <link href="https://memory-you.github.io/2019/09/26/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96/"/>
    <id>https://memory-you.github.io/2019/09/26/JavaScript专题之数组扁平化/</id>
    <published>2019-09-26T05:47:10.000Z</published>
    <updated>2019-09-26T07:41:16.793Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h2 id=&quot;扁平化&quot;&gt;&lt;a href=&quot;#扁平化&quot; class=&quot;headerlink&quot; title=&quot;扁平化&quot;&gt;&lt;/a&gt;扁平化&lt;/h2&gt;&lt;p&gt;数组的扁平化，就是将一个嵌套多层的数组array（嵌套可以是任何层数）转化为只有一层的数组。&lt;/p&gt;
&lt;p&gt;举个例子，假如有个名为flatten的函数可以做到数组扁平化，效果就会如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(flatten(arr)) &lt;span class=&quot;comment&quot;&gt;// [1, 2, 3, 4]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;知道了效果是什么样的了，我们可以去尝试写这个flatten函数了。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript专题之深浅拷贝</title>
    <link href="https://memory-you.github.io/2019/09/26/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>https://memory-you.github.io/2019/09/26/JavaScript专题之深浅拷贝/</id>
    <published>2019-09-26T05:29:02.000Z</published>
    <updated>2019-09-26T07:10:44.398Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
## 数组的浅拷贝

&lt;p&gt;如果是数组，我们可以利用数组的一些方法比如：slice、concat返回一个新数组的特性来实现拷贝。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之继承的多种方式及其优缺点</title>
    <link href="https://memory-you.github.io/2019/09/24/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E7%BB%A7%E6%89%BF%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%8F%8A%E5%85%B6%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
    <id>https://memory-you.github.io/2019/09/24/JavaScript深入之继承的多种方式及其优缺点/</id>
    <published>2019-09-24T13:58:50.000Z</published>
    <updated>2019-09-25T15:06:49.476Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
本文讲解JavaScript各种继承方式和优缺点/

&lt;ol&gt;
&lt;li&gt;原型链继承&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;tabl
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之创建对象的多种方式及其优缺点</title>
    <link href="https://memory-you.github.io/2019/09/24/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%8F%8A%E5%85%B6%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
    <id>https://memory-you.github.io/2019/09/24/JavaScript深入之创建对象的多种方式及其优缺点/</id>
    <published>2019-09-24T13:58:37.000Z</published>
    <updated>2019-09-25T13:50:17.812Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
## 写在前面

&lt;p&gt;这篇文章讲解创建对象的各种方式，以及优缺点。&lt;/p&gt;
&lt;p&gt;但是注意：这篇文章更像是笔记，因为《JavaScript高级程序设计》写得真是太好了。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之类数组对象与arguments</title>
    <link href="https://memory-you.github.io/2019/09/24/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E4%B8%8Earguments/"/>
    <id>https://memory-you.github.io/2019/09/24/JavaScript深入之类数组对象与arguments/</id>
    <published>2019-09-24T13:58:14.000Z</published>
    <updated>2019-09-25T10:43:09.648Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
## 类数组对象

&lt;p&gt;所谓类数组对象：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;拥有一个length属性和若干索引属性的对象。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之new的模拟实现</title>
    <link href="https://memory-you.github.io/2019/09/24/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8Bnew%E7%9A%84%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0/"/>
    <id>https://memory-you.github.io/2019/09/24/JavaScript深入之new的模拟实现/</id>
    <published>2019-09-24T13:57:59.000Z</published>
    <updated>2019-09-25T06:56:00.643Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h2 id=&quot;new&quot;&gt;&lt;a href=&quot;#new&quot; class=&quot;headerlink&quot; title=&quot;new&quot;&gt;&lt;/a&gt;new&lt;/h2&gt;&lt;p&gt;一句话介绍new：&lt;/p&gt;
&lt;block
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之bind的模拟实现</title>
    <link href="https://memory-you.github.io/2019/09/24/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8Bbind%E7%9A%84%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0/"/>
    <id>https://memory-you.github.io/2019/09/24/JavaScript深入之bind的模拟实现/</id>
    <published>2019-09-24T13:57:50.000Z</published>
    <updated>2019-09-25T06:05:26.806Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
## bind

&lt;p&gt;一句话介绍bind：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;bind()方法会创建一个新函数。当这个新函数被调用，bind()的第一个参数将作为它运行时的this，之后的一系列参数将会在传递的实参前传入作为它的参数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由此我们可以先得到bind函数的两个特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;返回一个函数&lt;/li&gt;
&lt;li&gt;可以传参数&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之call和apply的模拟实现</title>
    <link href="https://memory-you.github.io/2019/09/24/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8Bcall%E5%92%8Capply%E7%9A%84%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0/"/>
    <id>https://memory-you.github.io/2019/09/24/JavaScript深入之call和apply的模拟实现/</id>
    <published>2019-09-24T13:57:37.000Z</published>
    <updated>2019-09-25T05:31:39.103Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
## call

&lt;p&gt;一句话介绍call：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;call()方法在使用一个指定的this值和若干个指定的参数值的前提下调用某个函数或方法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之参数按值传递</title>
    <link href="https://memory-you.github.io/2019/09/24/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E5%8F%82%E6%95%B0%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92/"/>
    <id>https://memory-you.github.io/2019/09/24/JavaScript深入之参数按值传递/</id>
    <published>2019-09-24T13:57:20.000Z</published>
    <updated>2019-09-24T15:27:16.769Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;在《JavaScript高级程序设计》第三版 4.1.3，讲到传递参数：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ECMAScript中所有函数的参数都是按值传递的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;什么是按值传递呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;也就是说，把函数外部的值复制给函数内部的参数，就和把值从一个变量复制到另一个变量一样。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
