<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zeroXP</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://memory-you.github.io/"/>
  <updated>2019-09-14T09:53:32.197Z</updated>
  <id>https://memory-you.github.io/</id>
  
  <author>
    <name>zero XP</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ES6系列之箭头函数</title>
    <link href="https://memory-you.github.io/2019/09/13/ES6%E7%B3%BB%E5%88%97%E4%B9%8B%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
    <id>https://memory-you.github.io/2019/09/13/ES6系列之箭头函数/</id>
    <published>2019-09-13T15:35:12.000Z</published>
    <updated>2019-09-14T09:53:32.197Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
我们先来回顾下箭头函数的基本语法。

&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; func = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;value&lt;/span&gt; =&amp;gt;&lt;/span&gt; value&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;相当于：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; func = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>模板字符串</title>
    <link href="https://memory-you.github.io/2019/09/13/ES6%E7%B3%BB%E5%88%97%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://memory-you.github.io/2019/09/13/ES6系列之模板字符串/</id>
    <published>2019-09-13T13:23:27.000Z</published>
    <updated>2019-09-13T15:32:07.226Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
## 基础语法

&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; message = &lt;span class=&quot;string&quot;&gt;`Hello World`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(message)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果需要在字符串中使用反撇号，可以使用反斜杠转义：&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES6系列之let和const</title>
    <link href="https://memory-you.github.io/2019/09/13/ES6%E7%B3%BB%E5%88%97%E4%B9%8Blet%E5%92%8Cconst/"/>
    <id>https://memory-you.github.io/2019/09/13/ES6系列之let和const/</id>
    <published>2019-09-13T08:05:48.000Z</published>
    <updated>2019-09-13T10:26:23.921Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;通过 &lt;code&gt;var&lt;/code&gt;声明的变量存在变量提升的特性：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (condition) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; value = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(value)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;初学者可能会觉得只有condition为true的时候，才会创建value，如果condition为false，结果应该是报错，然而因为变量提升的原因，代码相当于：&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数组去重</title>
    <link href="https://memory-you.github.io/2019/09/10/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/"/>
    <id>https://memory-you.github.io/2019/09/10/数组去重/</id>
    <published>2019-09-10T15:30:09.000Z</published>
    <updated>2019-09-11T15:52:35.227Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
数组去重的方法：
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>节流</title>
    <link href="https://memory-you.github.io/2019/09/10/%E8%8A%82%E6%B5%81/"/>
    <id>https://memory-you.github.io/2019/09/10/节流/</id>
    <published>2019-09-10T14:46:56.000Z</published>
    <updated>2019-09-10T15:20:29.358Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;节流的原理：如果你持续触发事件，每隔一段时间，只执行一次事件。根据首次是否执行以及结束后是否执行，效果有所不同，实现的方式也有所不同。我们用leading代表首次是否执行，trailing代表结束后是否再执行一次。&lt;/p&gt;
&lt;p&gt;关于节流的实现，有两种主流的实现方式，一种是使用时间戳，一种是设置时间器。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>防抖</title>
    <link href="https://memory-you.github.io/2019/09/09/%E9%98%B2%E6%8A%96/"/>
    <id>https://memory-you.github.io/2019/09/09/防抖/</id>
    <published>2019-09-09T15:11:31.000Z</published>
    <updated>2019-09-09T16:04:22.744Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;在前端开发中会遇到一些频繁的事件触发，比如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;window的resize、scroll&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mousedown、mousemove&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;keyup、keydown&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为此，我们举个示例代码来了解事件如何频繁的触发：&lt;/p&gt;
&lt;p&gt;我们写个&lt;code&gt;index.html&lt;/code&gt;文件：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;zh-cmn-Hans&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;x-ua-compatible&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;IE=edge, chrome=1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;debounce&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;        &lt;span class=&quot;selector-id&quot;&gt;#container&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;            &lt;span class=&quot;selector-tag&quot;&gt;width&lt;/span&gt;: 100%; &lt;span class=&quot;selector-tag&quot;&gt;height&lt;/span&gt;: 200&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;; &lt;span class=&quot;selector-tag&quot;&gt;line-height&lt;/span&gt;: 200&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;; &lt;span class=&quot;selector-tag&quot;&gt;text-align&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;center&lt;/span&gt;; &lt;span class=&quot;selector-tag&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;selector-id&quot;&gt;#fff&lt;/span&gt;; &lt;span class=&quot;selector-tag&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;selector-id&quot;&gt;#444&lt;/span&gt;; &lt;span class=&quot;selector-tag&quot;&gt;font-size&lt;/span&gt;: 30&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;debounce.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;debounce.js&lt;/code&gt;文件的代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; count = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; container = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;container&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getUserAction&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    container.innerHTML = count++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;container.onmousemove = getUserAction;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;我们来看看效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/mqyqingfeng/Blog/raw/master/Images/debounce/debounce.gif&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;从左边滑到右边就触发了165次getUserAction函数！&lt;/p&gt;
&lt;p&gt;因为这个例子很简单，所有浏览器完全反应的过来，可是如果是复杂的回调函数或是ajax请求呢？假设1秒触发了60次，每个回调就必须在1000 / 60 = 16.67ms内完成，否则就会有卡顿出现。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，一般有两种解决方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;debounce防抖&lt;/li&gt;
&lt;li&gt;throttle节流&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>透彻掌握Promise</title>
    <link href="https://memory-you.github.io/2019/09/02/%E9%80%8F%E5%BD%BB%E6%8E%8C%E6%8F%A1Promise/"/>
    <id>https://memory-you.github.io/2019/09/02/透彻掌握Promise/</id>
    <published>2019-09-02T13:56:26.000Z</published>
    <updated>2019-09-10T14:46:44.792Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
在实际的使用中，有非常多的应用场景我们不能立即知道应该如何继续往下执行。最重要也是最主要的一个场景就是ajax场景。通俗的说，由于网速的不同，可能你得到的返回值时间也是不同的，这个时候我们就需要等待，结果出来了之后才知道怎么样继续下来。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>详解面向对象、构造函数、原型与原型链</title>
    <link href="https://memory-you.github.io/2019/09/02/%E8%AF%A6%E8%A7%A3%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E3%80%81%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E3%80%81%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>https://memory-you.github.io/2019/09/02/详解面向对象、构造函数、原型与原型链/</id>
    <published>2019-09-02T08:22:43.000Z</published>
    <updated>2019-09-02T13:53:05.271Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
## 对象的定义

&lt;p&gt;在ECMAScript-262中，对象被定义为“无无序属性的集合，其属性可以包含基本值、对象或者函数”。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>深入理解函数的柯里化</title>
    <link href="https://memory-you.github.io/2019/09/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%87%BD%E6%95%B0%E7%9A%84%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
    <id>https://memory-you.github.io/2019/09/02/深入理解函数的柯里化/</id>
    <published>2019-09-02T08:05:10.000Z</published>
    <updated>2019-09-02T08:19:29.181Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
柯里化是函数的一个比较高级的应用，想要理解它并不简单。

&lt;p&gt;柯里化是指一个函数（假设叫做createCurry），它接收函数A作为参数，运行后能够返回一个新的函数。并且这个新的函数能够处理函数A的剩余参数。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>函数与函数式编程</title>
    <link href="https://memory-you.github.io/2019/09/01/%E5%87%BD%E6%95%B0%E4%B8%8E%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>https://memory-you.github.io/2019/09/01/函数与函数式编程/</id>
    <published>2019-09-01T15:08:25.000Z</published>
    <updated>2019-09-02T07:23:21.852Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;纵观JavaScript中所有必须需要掌握的重点知识中，函数时我们在初学的时候最容易忽视的一个知识点。在学习的过程中，可能会有很多人、很多文章告诉你面向对象很重要，原型很重要，可是却很少有人告诉你，面向对象中所有的重点难点，几乎都与函数息息相关。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>全方位解读this</title>
    <link href="https://memory-you.github.io/2019/09/01/%E5%85%A8%E6%96%B9%E4%BD%8D%E8%A7%A3%E8%AF%BBthis/"/>
    <id>https://memory-you.github.io/2019/09/01/全方位解读this/</id>
    <published>2019-09-01T13:30:24.000Z</published>
    <updated>2019-09-01T14:03:32.389Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
我们在学习JavaScript的过程中，由于对一些概念理解得不是很清楚，但是又想要通过一些方式把它记下来，于是就很容易草率的给这些概念定下一些方便自己记忆的有偏差的结论.有的不准确的结论在网上还广为流传。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>图解作用域链与闭包</title>
    <link href="https://memory-you.github.io/2019/09/01/%E5%9B%BE%E8%A7%A3%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E4%B8%8E%E9%97%AD%E5%8C%85/"/>
    <id>https://memory-you.github.io/2019/09/01/图解作用域链与闭包/</id>
    <published>2019-09-01T12:33:01.000Z</published>
    <updated>2019-09-01T13:28:33.493Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;初学JavaScript的时候，我在学习闭包上，走了很多弯路。而这次重新回过头来对基础知识进行梳理，要讲清楚闭包，也是一个非常大的挑战。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>变量对象图解</title>
    <link href="https://memory-you.github.io/2019/09/01/%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1%E5%9B%BE%E8%A7%A3/"/>
    <id>https://memory-you.github.io/2019/09/01/变量对象图解/</id>
    <published>2019-09-01T08:08:37.000Z</published>
    <updated>2019-09-01T12:40:09.376Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
在JavaScript中，我们肯定不可避免需要声明变量和函数，可是JS解析器是如何找到这些变量的呢？我们还得对执行上下文有个更进一步的了解。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>执行上下文图解</title>
    <link href="https://memory-you.github.io/2019/09/01/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E5%9B%BE%E8%A7%A3/"/>
    <id>https://memory-you.github.io/2019/09/01/执行上下文图解/</id>
    <published>2019-09-01T06:37:11.000Z</published>
    <updated>2019-09-01T08:11:53.125Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
在JavaScript学习初期或者面试的时候常常会遇到考核变量提升的思考题。先来一个简单的。

&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a);   &lt;span class=&quot;comment&quot;&gt;// 这里会打印出什么？&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;暂时先不管这个例子，我们先引入一个JavaScript中最基础，但同时也是最重要的一个概念：执行上下文（Execution Context）。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>内存空间详细图解</title>
    <link href="https://memory-you.github.io/2019/08/31/%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E8%AF%A6%E7%BB%86%E5%9B%BE%E8%A7%A3/"/>
    <id>https://memory-you.github.io/2019/08/31/内存空间详细图解/</id>
    <published>2019-08-31T08:28:24.000Z</published>
    <updated>2019-08-31T14:41:26.273Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
因为JavaScript具有自动垃圾回收机制，所以对前端开发来说，内存空间并不是一个经常被提及的概念。但想要对JS理解更加深刻，就必须对内存空间有一个清晰的认知。

&lt;p&gt;在学习内存空间之前，我们需要对这三种数据结构有个直观的认知，堆（heap）、栈（stack）和队列（queue）。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>手写实现call()、apply()、bind()</title>
    <link href="https://memory-you.github.io/2019/08/31/%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0call()%E3%80%81apply()%E3%80%81bind()/"/>
    <id>https://memory-you.github.io/2019/08/31/手写实现call()、apply()、bind()/</id>
    <published>2019-08-31T04:29:04.000Z</published>
    <updated>2019-09-02T07:30:11.271Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
apply()和call()这两个方法的用途都是在特定的作用域中调用函数，实际上等于设置函数体内this对象的值。bind()方法会创建一个函数的实例，其this值会被绑定到传来的参数。总的来说是用来改变函数运行时this的指向。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript之工厂模式</title>
    <link href="https://memory-you.github.io/2019/08/31/JavaScript%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://memory-you.github.io/2019/08/31/JavaScript之工厂模式/</id>
    <published>2019-08-31T03:17:01.000Z</published>
    <updated>2019-09-02T07:30:41.778Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
工厂模式类似现实生活种的工厂可以产生大量相似的商品，去做同样的事情，实现相同的效果；
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Base64的原理与实现</title>
    <link href="https://memory-you.github.io/2019/08/30/Base64%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <id>https://memory-you.github.io/2019/08/30/Base64的原理与实现/</id>
    <published>2019-08-30T13:26:51.000Z</published>
    <updated>2019-08-30T14:59:12.603Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;我们知道在计算机中一个字节有256种组合，对应的就是ASCII码。而ASCII码的128~255之间的值属于不可见字符。有些网络传送渠道并不支持所有的字节，例如传统的邮件只支持可见字符的传送，而ASCII码的控制字符就不能通过邮件传送。图片二进制流的每一个字节也都不可能都是可见字符，因此它们也不能传送。对此最好的办法就是在不改变传统协议的情况下，做一种拓展方案来支持二进制文件的传送，将不可见的字符用可见字符来表示。Base64编码应运而生。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HTTP常见的状态码</title>
    <link href="https://memory-you.github.io/2019/08/30/HTTP%E5%B8%B8%E8%A7%81%E7%9A%84%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    <id>https://memory-you.github.io/2019/08/30/HTTP常见的状态码/</id>
    <published>2019-08-30T12:14:27.000Z</published>
    <updated>2019-08-30T12:59:48.180Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
状态码的职责是当客户端向服务器发送请求时，描述返回的请求结果。借助状态码，用户可以知道服务端时正常处理了请求还是出现了错误。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>常见六大Web安全按攻防解析</title>
    <link href="https://memory-you.github.io/2019/08/29/%E5%B8%B8%E8%A7%81%E5%85%AD%E5%A4%A7Web%E5%AE%89%E5%85%A8%E6%8C%89%E6%94%BB%E9%98%B2%E8%A7%A3%E6%9E%90/"/>
    <id>https://memory-you.github.io/2019/08/29/常见六大Web安全按攻防解析/</id>
    <published>2019-08-29T08:04:25.000Z</published>
    <updated>2019-08-30T12:13:37.043Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
在互联网时代，数据安全与个人隐私受到了前所未有的挑战，各种新奇的攻击技术层出不穷。如何才能更好地保护我们的数据？
    
    </summary>
    
    
  </entry>
  
</feed>
