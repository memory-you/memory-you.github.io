<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zeroXP</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://memory-you.github.io/"/>
  <updated>2019-09-24T13:58:50.848Z</updated>
  <id>https://memory-you.github.io/</id>
  
  <author>
    <name>zero XP</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript深入之继承的多种方式及其优缺点</title>
    <link href="https://memory-you.github.io/2019/09/24/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E7%BB%A7%E6%89%BF%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%8F%8A%E5%85%B6%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
    <id>https://memory-you.github.io/2019/09/24/JavaScript深入之继承的多种方式及其优缺点/</id>
    <published>2019-09-24T13:58:50.000Z</published>
    <updated>2019-09-24T13:58:50.848Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;


        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之创建对象的多种方式及其优缺点</title>
    <link href="https://memory-you.github.io/2019/09/24/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%8F%8A%E5%85%B6%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
    <id>https://memory-you.github.io/2019/09/24/JavaScript深入之创建对象的多种方式及其优缺点/</id>
    <published>2019-09-24T13:58:37.000Z</published>
    <updated>2019-09-24T13:58:37.625Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;


        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之类数组对象与arguments</title>
    <link href="https://memory-you.github.io/2019/09/24/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E4%B8%8Earguments/"/>
    <id>https://memory-you.github.io/2019/09/24/JavaScript深入之类数组对象与arguments/</id>
    <published>2019-09-24T13:58:14.000Z</published>
    <updated>2019-09-24T13:58:14.594Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;


        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之new的模拟实现</title>
    <link href="https://memory-you.github.io/2019/09/24/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8Bnew%E7%9A%84%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0/"/>
    <id>https://memory-you.github.io/2019/09/24/JavaScript深入之new的模拟实现/</id>
    <published>2019-09-24T13:57:59.000Z</published>
    <updated>2019-09-25T06:56:00.643Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h2 id=&quot;new&quot;&gt;&lt;a href=&quot;#new&quot; class=&quot;headerlink&quot; title=&quot;new&quot;&gt;&lt;/a&gt;new&lt;/h2&gt;&lt;p&gt;一句话介绍new：&lt;/p&gt;
&lt;block
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之bind的模拟实现</title>
    <link href="https://memory-you.github.io/2019/09/24/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8Bbind%E7%9A%84%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0/"/>
    <id>https://memory-you.github.io/2019/09/24/JavaScript深入之bind的模拟实现/</id>
    <published>2019-09-24T13:57:50.000Z</published>
    <updated>2019-09-25T06:05:26.806Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
## bind

&lt;p&gt;一句话介绍bind：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;bind()方法会创建一个新函数。当这个新函数被调用，bind()的第一个参数将作为它运行时的this，之后的一系列参数将会在传递的实参前传入作为它的参数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由此我们可以先得到bind函数的两个特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;返回一个函数&lt;/li&gt;
&lt;li&gt;可以传参数&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之call和apply的模拟实现</title>
    <link href="https://memory-you.github.io/2019/09/24/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8Bcall%E5%92%8Capply%E7%9A%84%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0/"/>
    <id>https://memory-you.github.io/2019/09/24/JavaScript深入之call和apply的模拟实现/</id>
    <published>2019-09-24T13:57:37.000Z</published>
    <updated>2019-09-25T05:31:39.103Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
## call

&lt;p&gt;一句话介绍call：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;call()方法在使用一个指定的this值和若干个指定的参数值的前提下调用某个函数或方法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之参数按值传递</title>
    <link href="https://memory-you.github.io/2019/09/24/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E5%8F%82%E6%95%B0%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92/"/>
    <id>https://memory-you.github.io/2019/09/24/JavaScript深入之参数按值传递/</id>
    <published>2019-09-24T13:57:20.000Z</published>
    <updated>2019-09-24T15:27:16.769Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;在《JavaScript高级程序设计》第三版 4.1.3，讲到传递参数：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ECMAScript中所有函数的参数都是按值传递的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;什么是按值传递呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;也就是说，把函数外部的值复制给函数内部的参数，就和把值从一个变量复制到另一个变量一样。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之闭包</title>
    <link href="https://memory-you.github.io/2019/09/24/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E9%97%AD%E5%8C%85/"/>
    <id>https://memory-you.github.io/2019/09/24/JavaScript深入之闭包/</id>
    <published>2019-09-24T13:57:05.000Z</published>
    <updated>2019-09-24T15:06:15.409Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
MDN对闭包的定义为：

&lt;blockquote&gt;
&lt;p&gt;闭包是指那些能够访问自由变量的函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那什么是自由变量呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;自由变量是指在函数中使用的，但既不是函数参数也不是函数的局部变量的变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由此，我们可以看出闭包由两部分组成： 函数 + 函数能访问到的自由变量&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之执行上下文</title>
    <link href="https://memory-you.github.io/2019/09/24/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87-1/"/>
    <id>https://memory-you.github.io/2019/09/24/JavaScript深入之执行上下文-1/</id>
    <published>2019-09-24T13:56:57.000Z</published>
    <updated>2019-09-24T14:31:47.067Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;在&lt;a href&gt;《JavaScript深入之执行上下文栈》&lt;/a&gt;中讲到，当 JavaScript 代码执行一段可执行代码(executable code)时，会创建对应的执行上下文(execution context)。&lt;/p&gt;
&lt;p&gt;对于每个执行上下文，都有三个重要属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变量对象(Variable object，VO)&lt;/li&gt;
&lt;li&gt;作用域链(Scope chain)&lt;/li&gt;
&lt;li&gt;this&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后分别在&lt;a href&gt;《JavaScript深入之变量对象》&lt;/a&gt;、&lt;a href&gt;《JavaScript深入之作用域链》&lt;/a&gt;、&lt;a href&gt;《JavaScript深入之从ECMAScript规范解读this》&lt;/a&gt;中讲解了这三个属性。&lt;/p&gt;
&lt;p&gt;阅读本文前，如果对以上的概念不是很清楚，希望先阅读这些文章。&lt;/p&gt;
&lt;p&gt;因为，这一篇，我们会结合着所有内容，讲讲执行上下文的具体处理过程。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之从ECMAScript规范解读this</title>
    <link href="https://memory-you.github.io/2019/09/22/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E4%BB%8EECMAScript%E8%A7%84%E8%8C%83%E8%A7%A3%E8%AF%BBthis/"/>
    <id>https://memory-you.github.io/2019/09/22/JavaScript深入之从ECMAScript规范解读this/</id>
    <published>2019-09-22T14:30:39.000Z</published>
    <updated>2019-09-23T15:30:33.860Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;在《JavaScript深入之执行上下文栈》中讲到，当JavaScript代码执行一段可执行代码(executable code)时，会创建对应的执行上下文(execution co
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之作用域链</title>
    <link href="https://memory-you.github.io/2019/09/22/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
    <id>https://memory-you.github.io/2019/09/22/JavaScript深入之作用域链/</id>
    <published>2019-09-22T14:30:07.000Z</published>
    <updated>2019-09-23T15:09:54.001Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
在[《JavaScript深入之执行上下文栈》]()中讲到，当JavaScript代码执行一段可执行代码(executable code)时，会创建对应的执行上下文(execution context)。

&lt;p&gt;对于每个执行上下文，都有三个重要属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变量对象(Variable object，VO)&lt;/li&gt;
&lt;li&gt;作用域链(Scope chain)&lt;/li&gt;
&lt;li&gt;this&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今天重点讲讲作用域链。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之变量对象</title>
    <link href="https://memory-you.github.io/2019/09/22/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1/"/>
    <id>https://memory-you.github.io/2019/09/22/JavaScript深入之变量对象/</id>
    <published>2019-09-22T14:29:43.000Z</published>
    <updated>2019-09-22T15:19:26.720Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
在上篇[《JavaScript深入之执行上下文栈》]()中讲到，当 JavaScript 代码执行一段可执行代码(executable code)时，会创建对应的执行上下文(execution context)。

&lt;p&gt;对于每个执行上下文，都有三个重要属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变量对象（Variable object， VO）&lt;/li&gt;
&lt;li&gt;作用域链（Scope Chain）&lt;/li&gt;
&lt;li&gt;this&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今天重点讲讲创建变量对象的过程。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之执行上下文</title>
    <link href="https://memory-you.github.io/2019/09/22/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    <id>https://memory-you.github.io/2019/09/22/JavaScript深入之执行上下文/</id>
    <published>2019-09-22T12:57:03.000Z</published>
    <updated>2019-09-22T13:18:50.123Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
## 顺序执行？

&lt;p&gt;如果要问到JavaScript代码执行顺序的话，想必写过JavaScript的开发者都会有个直观的印象，那就是顺序执行.毕竟：&lt;/p&gt;
&lt;figure class=
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之词法作用域与动态作用域</title>
    <link href="https://memory-you.github.io/2019/09/22/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E8%AF%8D%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E5%8A%A8%E6%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>https://memory-you.github.io/2019/09/22/JavaScript深入之词法作用域与动态作用域/</id>
    <published>2019-09-21T16:26:02.000Z</published>
    <updated>2019-09-22T11:52:31.029Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h2 id=&quot;作用域&quot;&gt;&lt;a href=&quot;#作用域&quot; class=&quot;headerlink&quot; title=&quot;作用域&quot;&gt;&lt;/a&gt;作用域&lt;/h2&gt;&lt;p&gt;作用域是指程序源代码中定义变量的区域。&lt;/p&gt;
&lt;p&gt;作用域规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。&lt;/p&gt;
&lt;p&gt;JavaScript采用词法作用域（lexical scoping），也就是静态作用域。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之从原型到原型链</title>
    <link href="https://memory-you.github.io/2019/09/20/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E4%BB%8E%E5%8E%9F%E5%9E%8B%E5%88%B0%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>https://memory-you.github.io/2019/09/20/JavaScript深入之从原型到原型链/</id>
    <published>2019-09-20T15:49:00.000Z</published>
    <updated>2019-09-21T16:24:57.304Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
## 构建函数创建对象

&lt;p&gt;我们先使用构造函数创建一个对象：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;person.name = &lt;span class=&quot;string&quot;&gt;&#39;Kevin&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person.name) &lt;span class=&quot;comment&quot;&gt;// Kevin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在这个例子中，Person就是一个构造函数，我们使用new创建了一个实例对象person。&lt;/p&gt;
&lt;p&gt;很简单吧，接下来进入正题：&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES6系列之模块加载方案</title>
    <link href="https://memory-you.github.io/2019/09/20/ES6%E7%B3%BB%E5%88%97%E4%B9%8B%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E6%96%B9%E6%A1%88/"/>
    <id>https://memory-you.github.io/2019/09/20/ES6系列之模块加载方案/</id>
    <published>2019-09-20T10:02:29.000Z</published>
    <updated>2019-09-20T15:44:57.850Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;我们重点介绍以下四种模块加载规范：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;AMD&lt;/li&gt;
&lt;li&gt;CMD&lt;/li&gt;
&lt;li&gt;CommonJS&lt;/li&gt;
&lt;li&gt;ES6模块&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后延伸讲下Babel的编译和webpack的打包原理&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES6系列之私有变量的实现</title>
    <link href="https://memory-you.github.io/2019/09/20/ES6%E7%B3%BB%E5%88%97%E4%B9%8B%E7%A7%81%E6%9C%89%E5%8F%98%E9%87%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://memory-you.github.io/2019/09/20/ES6系列之私有变量的实现/</id>
    <published>2019-09-20T08:36:04.000Z</published>
    <updated>2019-09-20T10:05:22.374Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;在阅读《ECMAScript6入门》的时候，零散的看到有私有变量的实现，所有在此总结一篇。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES6系列之defineProperty与proxy</title>
    <link href="https://memory-you.github.io/2019/09/19/ES6%E7%B3%BB%E5%88%97%E4%B9%8BdefineProperty%E4%B8%8Eproxy/"/>
    <id>https://memory-you.github.io/2019/09/19/ES6系列之defineProperty与proxy/</id>
    <published>2019-09-19T12:39:10.000Z</published>
    <updated>2019-09-19T15:14:47.986Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;我们或多或少都听过数据绑定这个词，数据绑定的关键在于监听数据的变化，可是对于这样一个对象：&lt;code&gt;var obj = { value: 1 }&lt;/code&gt;，我们该怎么知道obj发生了改变呢？&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES6系列之异步处理实战</title>
    <link href="https://memory-you.github.io/2019/09/19/ES6%E7%B3%BB%E5%88%97%E4%B9%8B%E5%BC%82%E6%AD%A5%E5%A4%84%E7%90%86%E5%AE%9E%E6%88%98/"/>
    <id>https://memory-you.github.io/2019/09/19/ES6系列之异步处理实战/</id>
    <published>2019-09-19T11:34:40.000Z</published>
    <updated>2019-09-19T12:35:21.807Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;我们已查找指定目录下的最大文件为例，感受从：&lt;/p&gt;
&lt;p&gt;回调函数 -&amp;gt; Promise -&amp;gt; Generator -&amp;gt; Async&lt;/p&gt;
&lt;p&gt;异步处理方式的改变。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES6系列之Async</title>
    <link href="https://memory-you.github.io/2019/09/16/ES6%E7%B3%BB%E5%88%97%E4%B9%8BAsync/"/>
    <id>https://memory-you.github.io/2019/09/16/ES6系列之Async/</id>
    <published>2019-09-16T14:22:20.000Z</published>
    <updated>2019-09-19T11:35:39.175Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
ES2017标准引入了async函数，使得异步操作变得更加方便。

&lt;p&gt;在异步处理上，async函数就是Generator的语法糖。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
