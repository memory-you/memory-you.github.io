<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zeroXP</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://memory-you.github.io/"/>
  <updated>2019-11-10T05:51:47.912Z</updated>
  <id>https://memory-you.github.io/</id>
  
  <author>
    <name>zero XP</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浏览器的缓存机制</title>
    <link href="https://memory-you.github.io/2019/11/10/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    <id>https://memory-you.github.io/2019/11/10/浏览器的缓存机制/</id>
    <published>2019-11-09T16:28:53.000Z</published>
    <updated>2019-11-10T05:51:47.912Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
缓存可以说是性能优化中简单高效的一种优化方式了，一个优秀的缓存策略可以缩短网页请求资源的距离，减少延迟，并且由于缓存文件可以重复利用，还可以减少带宽，降低网络负荷。

&lt;p&gt;对于一个数据请求来说，可以分为发起网络请求、后端处理、浏览器响应三个步骤。浏览器缓存可以帮助我们在第一和第三步骤中优化性能。比如说直接使用缓存而不发起请求，或者发起了请求但后端存储的数据和前端一致，那么就没有必要再将数据回传回来，这样就减少了响应数据。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浏览器存储</title>
    <link href="https://memory-you.github.io/2019/11/09/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AD%98%E5%82%A8/"/>
    <id>https://memory-you.github.io/2019/11/09/浏览器存储/</id>
    <published>2019-11-09T13:14:31.000Z</published>
    <updated>2019-11-09T16:24:17.378Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;随着移动网络的发展与演化，我们手机现在除了有原生APP，还能跑“WebApp”——它即开即用，用完即走。一个优秀的WebApp甚至用于和原生App媲美的功能和体验。WebApp优异的性能表现，有一部分原因要归功于浏览器存储技术的提升。cookie存储数据的功能已经很难满足开发所需，逐渐被WebStorage、IndexedDB所取代，本文将介绍这几种存储方式的差异和优缺点。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://memory-you.github.io/2019/11/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://memory-you.github.io/2019/11/08/正则表达式/</id>
    <published>2019-11-08T15:09:05.000Z</published>
    <updated>2019-11-09T10:36:09.912Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
正则表达式(Regular Expression)是一种文本模式，包括普通字符（例如，a到z之间的字母）和特殊字符（称为元字符）。正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。
    
    </summary>
    
      <category term="CSS" scheme="https://memory-you.github.io/categories/CSS/"/>
    
    
      <category term="css" scheme="https://memory-you.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Grid布局</title>
    <link href="https://memory-you.github.io/2019/11/02/Grid%E5%B8%83%E5%B1%80/"/>
    <id>https://memory-you.github.io/2019/11/02/Grid布局/</id>
    <published>2019-11-02T14:52:56.000Z</published>
    <updated>2019-11-02T17:18:45.202Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
网格布局（Grid）是最强大的CSS布局方案。

&lt;p&gt;它将网页划分为一个个网格，可以任意组合不同的网格，作出各种各样的布局。以前，只能通过复杂的CSS框架达到的效果，现在浏览器内置了。&lt;/p&gt;
&lt;p&gt;Flex布局与Grid布局有一定的相似性，都可以指定容器内部多个项目的位置。但是，它们也存在重大区别。&lt;/p&gt;
&lt;p&gt;Flex布局是轴线布局，只能指定“项目”针对轴线的位置，可以看作一维布局。Grid布局则是将容器划分成“行”和“列”，产生单元格，然后指定“项目所在”的单元格，可以看作是二维布局。Grid布局远比FLex布局强大。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Flex布局</title>
    <link href="https://memory-you.github.io/2019/11/02/Flex%E5%B8%83%E5%B1%80/"/>
    <id>https://memory-you.github.io/2019/11/02/Flex布局/</id>
    <published>2019-11-02T12:02:39.000Z</published>
    <updated>2019-11-02T17:19:10.854Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;网页布局（layout）是CSS的一个重点应用。&lt;/p&gt;
&lt;p&gt;传统的布局解决方案，基于盒状模式，依赖display属性+position属性+float属性。它对于那些特殊布局非常不方便，比如垂直居中就很不容易实现。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS样式规范</title>
    <link href="https://memory-you.github.io/2019/11/02/CSS%E6%A0%B7%E5%BC%8F%E8%A7%84%E8%8C%83/"/>
    <id>https://memory-you.github.io/2019/11/02/CSS样式规范/</id>
    <published>2019-11-02T10:20:19.000Z</published>
    <updated>2019-11-02T17:19:45.418Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
## 代码风格

&lt;ol&gt;
&lt;li&gt;采用UTF-8编码，在CSS头部引用&lt;code&gt;@charset &amp;quot;utf-8&amp;quot;&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;使用4个空格作为一个缩进层级，不允许使用两个空格或者tab字符；&lt;/li&gt;
&lt;li&gt;每行不得超过120个字符，除非单行不可分割；&lt;/li&gt;
&lt;li&gt;选择器嵌套层级不大于3级，位置靠后的限定条件应尽可能精确；&lt;/li&gt;
&lt;li&gt;尽量不要使用&lt;code&gt;@import&lt;/code&gt;，与&lt;code&gt;&amp;lt;links&amp;gt;&lt;/code&gt;相比，&lt;code&gt;@import&lt;/code&gt;速度较慢，增加了额外的页面请求，并可能导致其他无法预料的问题；&lt;/li&gt;
&lt;li&gt;Media Query不得单独编排，必须与相关的规则一起定义；&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript专题之函数组合</title>
    <link href="https://memory-you.github.io/2019/09/28/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E5%87%BD%E6%95%B0%E7%BB%84%E5%90%88/"/>
    <id>https://memory-you.github.io/2019/09/28/JavaScript专题之函数组合/</id>
    <published>2019-09-28T12:02:37.000Z</published>
    <updated>2019-09-29T09:22:26.350Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;我们需要写一个函数，输入’Kevin’，返回’HELLO, KEVIN’。&lt;/p&gt;
&lt;h2 id=&quot;尝试&quot;&gt;&lt;a href=&quot;#尝试&quot; class=&quot;headerlink&quot; title=&quot;尝试&quot;&gt;&lt;/a&gt;尝试&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; toUpperCase = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;X&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x.toUpperCase() &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hello = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;HELLO&#39;&lt;/span&gt; + x &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; greet = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; hello(toUpperCase(x))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;greet(&lt;span class=&quot;string&quot;&gt;&#39;kevin&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;还哈皮我们只有两个步骤，首先小写转大写，然后凭借拼接字符串。如果有更多的操作，greet函数里就需要更多的的嵌套，类似于fn3(fu2(fn1(fn0())))&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript专题之jQuery通用遍历方式each的实现</title>
    <link href="https://memory-you.github.io/2019/09/28/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8BjQuery%E9%80%9A%E7%94%A8%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8Feach%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://memory-you.github.io/2019/09/28/JavaScript专题之jQuery通用遍历方式each的实现/</id>
    <published>2019-09-28T12:02:37.000Z</published>
    <updated>2019-09-29T11:05:01.070Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
jQuery的each方法，作为一个通用遍历方法，可用于遍历对象和数组

&lt;p&gt;语法是：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;jQuery.each(object, [ callback ])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;回调函数拥有两个参数：第一个为对象的成员或数组的索引，第二个为对应变量或内容。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript专题之在数组中查找指定元素</title>
    <link href="https://memory-you.github.io/2019/09/28/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E5%9C%A8%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E6%8C%87%E5%AE%9A%E5%85%83%E7%B4%A0/"/>
    <id>https://memory-you.github.io/2019/09/28/JavaScript专题之在数组中查找指定元素/</id>
    <published>2019-09-28T07:18:45.000Z</published>
    <updated>2019-09-28T12:00:16.336Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;在开发中，我们经常会遇到在数组中查找指定元素的需求，可能大家觉得这个需求过于简单，然而如何优雅的去实现一个findIndex和findLastIndex、indexOf和lastIndexOf方法确实很少人思考的。&lt;/p&gt;
&lt;p&gt;在实现前，先看看ES6的findIndex方法，让大家了解findIndex的使用方法。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript专题之如何求数组的最大值和最小值</title>
    <link href="https://memory-you.github.io/2019/09/28/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E5%A6%82%E4%BD%95%E6%B1%82%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC%E5%92%8C%E6%9C%80%E5%B0%8F%E5%80%BC/"/>
    <id>https://memory-you.github.io/2019/09/28/JavaScript专题之如何求数组的最大值和最小值/</id>
    <published>2019-09-28T07:18:15.000Z</published>
    <updated>2019-09-28T07:38:48.675Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;取出数组中的最大值或者最小值是开发中常见的需求，但你能想出几种方法来实现这个需求呢？&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript专题之类型判断</title>
    <link href="https://memory-you.github.io/2019/09/27/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/"/>
    <id>https://memory-you.github.io/2019/09/27/JavaScript专题之类型判断/</id>
    <published>2019-09-27T04:42:45.000Z</published>
    <updated>2019-09-27T16:27:36.242Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;类型判断在web开发中有非常广泛的应用，简单的有判断数字还是字符串，进阶一点的有判断数组还是对象，再进阶一点的有判断日期、正则、错误类型，再再进阶一点还有比如判断plainObject、空对象、Window对象等等。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript专题之从零实现jQuery的extend</title>
    <link href="https://memory-you.github.io/2019/09/27/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0jQuery%E7%9A%84extend/"/>
    <id>https://memory-you.github.io/2019/09/27/JavaScript专题之从零实现jQuery的extend/</id>
    <published>2019-09-27T04:42:14.000Z</published>
    <updated>2019-09-27T13:15:30.734Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
jQuery的extend是jQuery中应用非常多的一个函数，今天我们一起看jQuery的extend特性，一边实现一个extend。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript专题之递归</title>
    <link href="https://memory-you.github.io/2019/09/26/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E9%80%92%E5%BD%92/"/>
    <id>https://memory-you.github.io/2019/09/26/JavaScript专题之递归/</id>
    <published>2019-09-26T05:47:56.000Z</published>
    <updated>2019-09-29T11:04:46.177Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
程序调用自身的编程技巧称为递归（recursion）。

&lt;h2 id=&quot;阶乘&quot;&gt;&lt;a href=&quot;#阶乘&quot; class=&quot;headerlink&quot; title=&quot;阶乘&quot;&gt;&lt;/a&gt;阶乘&lt;/h2&gt;&lt;p&gt;以阶乘为例：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;factorial&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; n&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; n * factorial(n &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(factorial(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)) &lt;span class=&quot;comment&quot;&gt;// 5 * 4 * 3 * 2 * 1 = 120&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript专题之函数记忆</title>
    <link href="https://memory-you.github.io/2019/09/26/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E5%87%BD%E6%95%B0%E8%AE%B0%E5%BF%86/"/>
    <id>https://memory-you.github.io/2019/09/26/JavaScript专题之函数记忆/</id>
    <published>2019-09-26T05:47:49.000Z</published>
    <updated>2019-09-29T09:55:44.833Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;函数记忆是指将上次的计算结果缓存起来，当下次调用时，如果遇到相同的参数，就直接返回缓存中的数据。&lt;/p&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a, b&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a + b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 假设memoize可以实现函数记忆&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; memoizedAdd = memoize(add)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;memoizedAdd(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;memoizedAdd(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 相同的参数，第二次调用时，从缓存中取出数据，而非重新计算一次&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript专题之惰性函数</title>
    <link href="https://memory-you.github.io/2019/09/26/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E6%83%B0%E6%80%A7%E5%87%BD%E6%95%B0/"/>
    <id>https://memory-you.github.io/2019/09/26/JavaScript专题之惰性函数/</id>
    <published>2019-09-26T05:47:41.000Z</published>
    <updated>2019-09-26T11:10:07.119Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;我们现在需要写一个foo函数，这个函数返回首次调用时的Data对象，注意是首次。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript专题之偏函数</title>
    <link href="https://memory-you.github.io/2019/09/26/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E5%81%8F%E5%87%BD%E6%95%B0/"/>
    <id>https://memory-you.github.io/2019/09/26/JavaScript专题之偏函数/</id>
    <published>2019-09-26T05:47:28.000Z</published>
    <updated>2019-09-29T06:57:25.513Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
维基百科中对偏函数 (Partial application) 的定义为：

&lt;blockquote&gt;
&lt;p&gt;In computer science, partial application (or partial function application) refers to the process of fixing a number of arguments to a function, producing another function of smaller arity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;翻译成中文：&lt;/p&gt;
&lt;p&gt;在计算机科学中，局部应用是指固定一个函数的一些参数，然后产生另一个更小元的函数。&lt;/p&gt;
&lt;p&gt;什么是元？元是指函数参数的个数，比如一个带有两个参数的函数被称为二元函数。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript专题之函数柯里化</title>
    <link href="https://memory-you.github.io/2019/09/26/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
    <id>https://memory-you.github.io/2019/09/26/JavaScript专题之函数柯里化/</id>
    <published>2019-09-26T05:47:20.000Z</published>
    <updated>2019-09-28T16:08:59.359Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;维基百科中对柯里化 (Currying) 的定义为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In mathematics and computer science, currying is the technique of translating the evaluation of a function that takes multiple arguments (or a tuple of arguments) into evaluating a sequence of functions, each with a single argument.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;翻译成中文：&lt;/p&gt;
&lt;p&gt;在数学和计算机科学中，柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript专题之数组扁平化</title>
    <link href="https://memory-you.github.io/2019/09/26/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96/"/>
    <id>https://memory-you.github.io/2019/09/26/JavaScript专题之数组扁平化/</id>
    <published>2019-09-26T05:47:10.000Z</published>
    <updated>2019-09-26T07:41:16.793Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h2 id=&quot;扁平化&quot;&gt;&lt;a href=&quot;#扁平化&quot; class=&quot;headerlink&quot; title=&quot;扁平化&quot;&gt;&lt;/a&gt;扁平化&lt;/h2&gt;&lt;p&gt;数组的扁平化，就是将一个嵌套多层的数组array（嵌套可以是任何层数）转化为只有一层的数组。&lt;/p&gt;
&lt;p&gt;举个例子，假如有个名为flatten的函数可以做到数组扁平化，效果就会如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(flatten(arr)) &lt;span class=&quot;comment&quot;&gt;// [1, 2, 3, 4]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;知道了效果是什么样的了，我们可以去尝试写这个flatten函数了。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript专题之深浅拷贝</title>
    <link href="https://memory-you.github.io/2019/09/26/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>https://memory-you.github.io/2019/09/26/JavaScript专题之深浅拷贝/</id>
    <published>2019-09-26T05:29:02.000Z</published>
    <updated>2019-09-26T07:10:44.398Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
## 数组的浅拷贝

&lt;p&gt;如果是数组，我们可以利用数组的一些方法比如：slice、concat返回一个新数组的特性来实现拷贝。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之继承的多种方式及其优缺点</title>
    <link href="https://memory-you.github.io/2019/09/24/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E7%BB%A7%E6%89%BF%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%8F%8A%E5%85%B6%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
    <id>https://memory-you.github.io/2019/09/24/JavaScript深入之继承的多种方式及其优缺点/</id>
    <published>2019-09-24T13:58:50.000Z</published>
    <updated>2019-09-29T11:05:38.153Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
本文讲解JavaScript各种继承方式和优缺点.
    
    </summary>
    
    
  </entry>
  
</feed>
