<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zeroXP</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://memory-you.github.io/"/>
  <updated>2019-09-26T05:48:06.727Z</updated>
  <id>https://memory-you.github.io/</id>
  
  <author>
    <name>zero XP</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript专题之乱序</title>
    <link href="https://memory-you.github.io/2019/09/26/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E4%B9%B1%E5%BA%8F/"/>
    <id>https://memory-you.github.io/2019/09/26/JavaScript专题之乱序/</id>
    <published>2019-09-26T05:48:06.000Z</published>
    <updated>2019-09-26T05:48:06.727Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;


        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript专题之递归</title>
    <link href="https://memory-you.github.io/2019/09/26/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E9%80%92%E5%BD%92/"/>
    <id>https://memory-you.github.io/2019/09/26/JavaScript专题之递归/</id>
    <published>2019-09-26T05:47:56.000Z</published>
    <updated>2019-09-26T05:47:56.914Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;


        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript专题之函数记忆</title>
    <link href="https://memory-you.github.io/2019/09/26/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E5%87%BD%E6%95%B0%E8%AE%B0%E5%BF%86/"/>
    <id>https://memory-you.github.io/2019/09/26/JavaScript专题之函数记忆/</id>
    <published>2019-09-26T05:47:49.000Z</published>
    <updated>2019-09-26T05:47:49.889Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;


        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript专题之惰性函数</title>
    <link href="https://memory-you.github.io/2019/09/26/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E6%83%B0%E6%80%A7%E5%87%BD%E6%95%B0/"/>
    <id>https://memory-you.github.io/2019/09/26/JavaScript专题之惰性函数/</id>
    <published>2019-09-26T05:47:41.000Z</published>
    <updated>2019-09-26T05:47:41.732Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;


        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript专题之偏函数</title>
    <link href="https://memory-you.github.io/2019/09/26/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E5%81%8F%E5%87%BD%E6%95%B0/"/>
    <id>https://memory-you.github.io/2019/09/26/JavaScript专题之偏函数/</id>
    <published>2019-09-26T05:47:28.000Z</published>
    <updated>2019-09-26T05:47:28.492Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;


        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript专题之函数柯里化</title>
    <link href="https://memory-you.github.io/2019/09/26/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
    <id>https://memory-you.github.io/2019/09/26/JavaScript专题之函数柯里化/</id>
    <published>2019-09-26T05:47:20.000Z</published>
    <updated>2019-09-26T05:47:20.254Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;


        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript专题之数组扁平化</title>
    <link href="https://memory-you.github.io/2019/09/26/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96/"/>
    <id>https://memory-you.github.io/2019/09/26/JavaScript专题之数组扁平化/</id>
    <published>2019-09-26T05:47:10.000Z</published>
    <updated>2019-09-26T07:41:16.793Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h2 id=&quot;扁平化&quot;&gt;&lt;a href=&quot;#扁平化&quot; class=&quot;headerlink&quot; title=&quot;扁平化&quot;&gt;&lt;/a&gt;扁平化&lt;/h2&gt;&lt;p&gt;数组的扁平化，就是将一个嵌套多层的数组array（嵌套可以是任何层数）转化为只有一层的数组。&lt;/p&gt;
&lt;p&gt;举个例子，假如有个名为flatten的函数可以做到数组扁平化，效果就会如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(flatten(arr)) &lt;span class=&quot;comment&quot;&gt;// [1, 2, 3, 4]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;知道了效果是什么样的了，我们可以去尝试写这个flatten函数了。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript专题之深浅拷贝</title>
    <link href="https://memory-you.github.io/2019/09/26/JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>https://memory-you.github.io/2019/09/26/JavaScript专题之深浅拷贝/</id>
    <published>2019-09-26T05:29:02.000Z</published>
    <updated>2019-09-26T07:10:44.398Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
## 数组的浅拷贝

&lt;p&gt;如果是数组，我们可以利用数组的一些方法比如：slice、concat返回一个新数组的特性来实现拷贝。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之继承的多种方式及其优缺点</title>
    <link href="https://memory-you.github.io/2019/09/24/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E7%BB%A7%E6%89%BF%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%8F%8A%E5%85%B6%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
    <id>https://memory-you.github.io/2019/09/24/JavaScript深入之继承的多种方式及其优缺点/</id>
    <published>2019-09-24T13:58:50.000Z</published>
    <updated>2019-09-25T15:06:49.476Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
本文讲解JavaScript各种继承方式和优缺点/

&lt;ol&gt;
&lt;li&gt;原型链继承&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;tabl
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之创建对象的多种方式及其优缺点</title>
    <link href="https://memory-you.github.io/2019/09/24/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%8F%8A%E5%85%B6%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
    <id>https://memory-you.github.io/2019/09/24/JavaScript深入之创建对象的多种方式及其优缺点/</id>
    <published>2019-09-24T13:58:37.000Z</published>
    <updated>2019-09-25T13:50:17.812Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
## 写在前面

&lt;p&gt;这篇文章讲解创建对象的各种方式，以及优缺点。&lt;/p&gt;
&lt;p&gt;但是注意：这篇文章更像是笔记，因为《JavaScript高级程序设计》写得真是太好了。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之类数组对象与arguments</title>
    <link href="https://memory-you.github.io/2019/09/24/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E4%B8%8Earguments/"/>
    <id>https://memory-you.github.io/2019/09/24/JavaScript深入之类数组对象与arguments/</id>
    <published>2019-09-24T13:58:14.000Z</published>
    <updated>2019-09-25T10:43:09.648Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
## 类数组对象

&lt;p&gt;所谓类数组对象：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;拥有一个length属性和若干索引属性的对象。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之new的模拟实现</title>
    <link href="https://memory-you.github.io/2019/09/24/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8Bnew%E7%9A%84%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0/"/>
    <id>https://memory-you.github.io/2019/09/24/JavaScript深入之new的模拟实现/</id>
    <published>2019-09-24T13:57:59.000Z</published>
    <updated>2019-09-25T06:56:00.643Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h2 id=&quot;new&quot;&gt;&lt;a href=&quot;#new&quot; class=&quot;headerlink&quot; title=&quot;new&quot;&gt;&lt;/a&gt;new&lt;/h2&gt;&lt;p&gt;一句话介绍new：&lt;/p&gt;
&lt;block
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之bind的模拟实现</title>
    <link href="https://memory-you.github.io/2019/09/24/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8Bbind%E7%9A%84%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0/"/>
    <id>https://memory-you.github.io/2019/09/24/JavaScript深入之bind的模拟实现/</id>
    <published>2019-09-24T13:57:50.000Z</published>
    <updated>2019-09-25T06:05:26.806Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
## bind

&lt;p&gt;一句话介绍bind：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;bind()方法会创建一个新函数。当这个新函数被调用，bind()的第一个参数将作为它运行时的this，之后的一系列参数将会在传递的实参前传入作为它的参数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由此我们可以先得到bind函数的两个特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;返回一个函数&lt;/li&gt;
&lt;li&gt;可以传参数&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之call和apply的模拟实现</title>
    <link href="https://memory-you.github.io/2019/09/24/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8Bcall%E5%92%8Capply%E7%9A%84%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0/"/>
    <id>https://memory-you.github.io/2019/09/24/JavaScript深入之call和apply的模拟实现/</id>
    <published>2019-09-24T13:57:37.000Z</published>
    <updated>2019-09-25T05:31:39.103Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
## call

&lt;p&gt;一句话介绍call：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;call()方法在使用一个指定的this值和若干个指定的参数值的前提下调用某个函数或方法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之参数按值传递</title>
    <link href="https://memory-you.github.io/2019/09/24/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E5%8F%82%E6%95%B0%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92/"/>
    <id>https://memory-you.github.io/2019/09/24/JavaScript深入之参数按值传递/</id>
    <published>2019-09-24T13:57:20.000Z</published>
    <updated>2019-09-24T15:27:16.769Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;在《JavaScript高级程序设计》第三版 4.1.3，讲到传递参数：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ECMAScript中所有函数的参数都是按值传递的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;什么是按值传递呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;也就是说，把函数外部的值复制给函数内部的参数，就和把值从一个变量复制到另一个变量一样。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之闭包</title>
    <link href="https://memory-you.github.io/2019/09/24/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E9%97%AD%E5%8C%85/"/>
    <id>https://memory-you.github.io/2019/09/24/JavaScript深入之闭包/</id>
    <published>2019-09-24T13:57:05.000Z</published>
    <updated>2019-09-24T15:06:15.409Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
MDN对闭包的定义为：

&lt;blockquote&gt;
&lt;p&gt;闭包是指那些能够访问自由变量的函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那什么是自由变量呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;自由变量是指在函数中使用的，但既不是函数参数也不是函数的局部变量的变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由此，我们可以看出闭包由两部分组成： 函数 + 函数能访问到的自由变量&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之执行上下文</title>
    <link href="https://memory-you.github.io/2019/09/24/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87-1/"/>
    <id>https://memory-you.github.io/2019/09/24/JavaScript深入之执行上下文-1/</id>
    <published>2019-09-24T13:56:57.000Z</published>
    <updated>2019-09-24T14:31:47.067Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;在&lt;a href&gt;《JavaScript深入之执行上下文栈》&lt;/a&gt;中讲到，当 JavaScript 代码执行一段可执行代码(executable code)时，会创建对应的执行上下文(execution context)。&lt;/p&gt;
&lt;p&gt;对于每个执行上下文，都有三个重要属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变量对象(Variable object，VO)&lt;/li&gt;
&lt;li&gt;作用域链(Scope chain)&lt;/li&gt;
&lt;li&gt;this&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后分别在&lt;a href&gt;《JavaScript深入之变量对象》&lt;/a&gt;、&lt;a href&gt;《JavaScript深入之作用域链》&lt;/a&gt;、&lt;a href&gt;《JavaScript深入之从ECMAScript规范解读this》&lt;/a&gt;中讲解了这三个属性。&lt;/p&gt;
&lt;p&gt;阅读本文前，如果对以上的概念不是很清楚，希望先阅读这些文章。&lt;/p&gt;
&lt;p&gt;因为，这一篇，我们会结合着所有内容，讲讲执行上下文的具体处理过程。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之从ECMAScript规范解读this</title>
    <link href="https://memory-you.github.io/2019/09/22/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E4%BB%8EECMAScript%E8%A7%84%E8%8C%83%E8%A7%A3%E8%AF%BBthis/"/>
    <id>https://memory-you.github.io/2019/09/22/JavaScript深入之从ECMAScript规范解读this/</id>
    <published>2019-09-22T14:30:39.000Z</published>
    <updated>2019-09-23T15:30:33.860Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;在《JavaScript深入之执行上下文栈》中讲到，当JavaScript代码执行一段可执行代码(executable code)时，会创建对应的执行上下文(execution co
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之作用域链</title>
    <link href="https://memory-you.github.io/2019/09/22/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
    <id>https://memory-you.github.io/2019/09/22/JavaScript深入之作用域链/</id>
    <published>2019-09-22T14:30:07.000Z</published>
    <updated>2019-09-23T15:09:54.001Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
在[《JavaScript深入之执行上下文栈》]()中讲到，当JavaScript代码执行一段可执行代码(executable code)时，会创建对应的执行上下文(execution context)。

&lt;p&gt;对于每个执行上下文，都有三个重要属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变量对象(Variable object，VO)&lt;/li&gt;
&lt;li&gt;作用域链(Scope chain)&lt;/li&gt;
&lt;li&gt;this&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今天重点讲讲作用域链。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript深入之变量对象</title>
    <link href="https://memory-you.github.io/2019/09/22/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1/"/>
    <id>https://memory-you.github.io/2019/09/22/JavaScript深入之变量对象/</id>
    <published>2019-09-22T14:29:43.000Z</published>
    <updated>2019-09-22T15:19:26.720Z</updated>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
在上篇[《JavaScript深入之执行上下文栈》]()中讲到，当 JavaScript 代码执行一段可执行代码(executable code)时，会创建对应的执行上下文(execution context)。

&lt;p&gt;对于每个执行上下文，都有三个重要属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变量对象（Variable object， VO）&lt;/li&gt;
&lt;li&gt;作用域链（Scope Chain）&lt;/li&gt;
&lt;li&gt;this&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今天重点讲讲创建变量对象的过程。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
